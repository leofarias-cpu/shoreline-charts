import { rmSync } from 'fs'
import * as TypeDoc from 'typedoc'
import { defaultTypedocConfig } from './config'
import { parseJSONDocs } from './parser'

/**
 * This script is responsible for generating the docs for the components and
 * hooks of a package. It uses typedoc to generate the docs and then it splits
 * the generated docs into multiple markdown files on the paths configured
 * by the client under a package.
 *
 * @example
 * new AutogeneratedDocs({
 *  packages: [
 *   {
 *     name: '@vtex/shoreline-components',
 *     version: '^0.x',
 *     paths: {
 *       componentsPath: `/../next-docs/pages/components`,
 *       hooksPath: `/../next-docs/pages/components/hooks`,
 *     },
 *     config: {
 *       entryPoints: ['../components/src/index.ts'],
 *       exclude: ['../components/src/all/tests],
 *       tsconfig: '../components/tsconfig.json',
 *     },
 *   },
 *  ],
 *  rootPath: `/../next-docs/pages`,
 * })
 */
class AutogeneratedDocs {
  constructor(props: {
    packages: Array<{
      name: string
      version: string
      paths: {
        componentsPath?: string
        hooksPath?: string
      }
      config: {
        entryPoints: string[]
        exclude: string[]
        tsconfig: string
      }
    }>
    rootPath: string
  }) {
    const { packages } = props

    for (const pkg of packages) {
      const { config } = pkg

      this.generateDocs(config)
    }
  }

  /**
   * Configures TypeDoc, generates the JSON documentation and then parses it.
   * This is the entrypoint of this script.
   *
   * @param config The typedoc config
   */
  private async generateDocs(config: {
    entryPoints: string[]
    exclude: string[]
    tsconfig: string
  }) {
    const app = await TypeDoc.Application.bootstrapWithPlugins({
      ...config,
      ...defaultTypedocConfig,
    })

    const project = await app.convert()

    if (!project) {
      throw new Error('Something went wrong while generating docs')
    }

    await app.generateJson(project, './documentation.json')

    await parseJSONDocs()

    rmSync('./documentation.json')
  }
}

new AutogeneratedDocs({
  // @TODO: Move this to a config file (.e.g `docgen.config.ts`)
  packages: [
    {
      name: '@vtex/shoreline-components',
      version: '^0.x',
      paths: {
        componentsPath: `/../next-docs/pages/components`,
        hooksPath: `/../next-docs/pages/components/hooks`,
      },
      config: {
        entryPoints: ['../components/src/index.ts'],
        exclude: [
          '../components/src/**/*+(index|.vitest|.e2e|.test|.stories).(ts|tsx)',
        ],
        tsconfig: '../components/tsconfig.json',
      },
    },
  ],
  rootPath: `/../next-docs/pages`,
})
