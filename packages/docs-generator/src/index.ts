import { rm } from 'fs/promises'
import * as TypeDoc from 'typedoc'
import type { PkgToBeDocumented } from './config'
import { defaultTypedocConfig, tmpDocsJsonPath } from './config'
import { parseJSONDocs } from './parser'

/**
 * This script is responsible for generating the docs for the components and
 * hooks of a package. It uses typedoc to generate the docs and then it splits
 * the generated docs into multiple markdown files on the paths configured
 * by the client under a package.
 *
 * @param packages The packages to be documented
 * @example
 * new AutogeneratedDocs(packages)
 */
class AutogeneratedDocs {
  constructor(packages: PkgToBeDocumented[]) {
    for (const pkg of packages) {
      this.generateDocs(pkg)
    }
  }

  /**
   * Configures TypeDoc, generates the JSON documentation and then parses it.
   * This is the entrypoint of this script.
   *
   * @param config The typedoc config
   */
  private async generateDocs(pkg: PkgToBeDocumented) {
    const { config, paths } = pkg

    const app = await TypeDoc.Application.bootstrapWithPlugins({
      ...config,
      ...defaultTypedocConfig,
    })

    const project = await app.convert()

    if (!project) {
      throw new Error('Something went wrong while generating docs')
    }

    await app.generateJson(project, tmpDocsJsonPath)

    await parseJSONDocs(paths)

    await rm(tmpDocsJsonPath, { force: true, recursive: true })
  }
}

/**
 * @todo move this to a config file/cli
 */
const config: PkgToBeDocumented[] = [
  {
    name: '@vtex/shoreline-components',
    version: '^0.x',
    paths: {
      components: {
        docPath: `../next-docs/pages/components`,
        filename: 'api-reference.mdx',
      },
    },
    config: {
      entryPoints: ['../components/src/index.ts'],
      exclude: [
        '../components/src/**/*+(index|.vitest|.e2e|.test|.stories).(ts|tsx)',
      ],
      tsconfig: '../components/tsconfig.json',
    },
  },
]

new AutogeneratedDocs(config)
